#!/usr/bin/env python
"""
    Vulscan 
"""
from __future__ import with_statement
import time, base64
import filecmp
import os,sys,re,random
from StringIO import StringIO
try:
	from lxml import etree
except ImportError:
	try:
		import xml.etree.cElementTree as etree
	except ImportError:
		try:
			import xml.etree.ElementTree as etree
		except ImportError:
			print "Cannot find the ElementTree in your python packages"

__application__ = "vulscan"
__version__     = "0.1"
__release__     = __application__ + '/' + __version__
__author__      = "Sagar Palao"

names = {
	'xss'  : 'Cross-Site Scripting',
	'sqli' : 'SQL Injection',
	'csrf' : 'Cross-Site Request Forgery',
	'dos'  : 'Denial Of Service',
	'dt'   : 'Directory Traversal',
	'spam' : 'Spam',
	'id'   : 'Information Disclosure',
	'rfe'  : 'Remote File Execution',
	'lfi'  : 'Local File Inclusion'
}

c_reg = re.compile(r'^(.+)-(.*)\[(.+)[-|+](\d+)\] "([A-Z]+)?(.+) HTTP/\d.\d" (\d+)(\s[\d]+)?(\s"(.+)" )?(.*)$')
table = {}

txt_header = """
#
# File created by Vulscan after log analysis on http services
"""

xml_header = """<!--
 File created by Vulscan
-->
<?xml version="1.0" encoding="utf-8"?>
"""

html_header = """
<html>
	<head>
		<link rel = "stylesheet" href="./style/report.css" />
		<link rel="stylesheet" href="./style/jQuery-plugin-progressbar.css">
		<script src="./style/jquery-3.1.1.js"></script>
		<script src="./style/jQuery-plugin-progressbar.js"></script>
		<script src="./style/jquery.showmore.min.js"></script>
		
	</head>
<body>
	<div class="bg"></div>
    <div class="bg2"></div>
    <div class="bg3"></div>
    <div class="part1">Generic Threat</div>
    <div class="part2">Specific Threat</div>
"""

html_footer = "<div id='footer'>Vulscan</div></body></html>"

class object_dict(dict):
	def __init__(self, initd=None):
		if initd is None:
			initd = {}
		dict.__init__(self, initd)
	def __getattr__(self, item):
		d = self.__getitem__(item)
		# if value is the only key in object, you can omit it
		if isinstance(d, dict) and 'value' in d and len(d) == 1:
			return d['value']
		else:
			return d
	def __setattr__(self, item, value):
		self.__setitem__(item, value)

def __parse_node(node):
	tmp = object_dict()
	if node.text:
		tmp['value'] = node.text
	for (k,v) in node.attrib.items():
		tmp[k] = v
	for ch in node.getchildren():
		cht = ch.tag
		chp = __parse_node(ch)
		if cht not in tmp: 
			tmp[cht] = chp
			continue
		old = tmp[cht]
		if not isinstance(old, list):
			tmp.pop(cht)
			tmp[cht] = [old] 
		tmp[cht].append(chp) 
	return	tmp

def parse(xml_file):
	try:
		xml_handler = open(xml_file, 'r')
		doc = etree.parse(xml_handler).getroot()
		xml_handler.close()
		return object_dict({doc.tag: __parse_node(doc)})
	except IOError:
		print "error: problem with the filter's file"
		return {}

def get_value(array, default):
	if 'value' in array:
		return array['value']
	return default

def html_entities(str):
	out = ""
	for i in str:
		if   i == '"': out += '&quot;'
		elif i == '<': out += '&lt;'
		elif i == '>': out += '&gt;'
		else:
			out += i
	return out

d_replace = {
	"\r":";",
	"\n":";",
	"\f":";",
	"\t":";",
	"\v":";",
	"'":"\"",
	"+ACI-":"\"",
	"+ADw-":"<",
	"+AD4-"      : ">",
	"+AFs-"      : "[",
	"+AF0-"      : "]",
	"+AHs-"      : "{",
	"+AH0-"      : "}",
	"+AFw-"      : "\\",
	"+ADs-"      : ";",
	"+ACM-"      : "#",
	"+ACY-"      : "&",
	"+ACU-"      : "%",
	"+ACQ-"      : "$",
	"+AD0-"      : "=",
	"+AGA-"      : "'",
	"+ALQ-"      : "\"",
	"+IBg-"      : "\"",
	"+IBk-"      : "\"",
	"+AHw-"      : "|",
	"+ACo-"      : "*",
	"+AF4-"      : "^",
	"+ACIAPg-"   : "\">",
	"+ACIAPgA8-" : "\">",
}
re_replace = None


def fill_replace_dict():
	global d_replace, re_replace
	# very first control-chars
	for i in range(0,20):
		d_replace["%%%x" % i] = "%00"
		d_replace["%%%X" % i] = "%00"
	# javascript charcode
	for i in range(33,127):
		c = "%c" % i
		d_replace["\\%o" % i] = c
		d_replace["\\%x" % i] = c
		d_replace["\\%X" % i] = c
		d_replace["0x%x" % i] = c
		d_replace["&#%d;" % i] = c
		d_replace["&#%x;" % i] = c
		d_replace["&#%X;" % i] = c
	# SQL words?
	d_replace["is null"]="=0"
	d_replace["like null"]="=0"
	d_replace["utc_time"]=""
	d_replace["null"]=""
	d_replace["true"]=""
	d_replace["false"]=""
	d_replace["localtime"]=""
	d_replace["stamp"]=""
	d_replace["binary"]=""
	d_replace["ascii"]=""
	d_replace["soundex"]=""
	d_replace["md5"]=""
	d_replace["between"]="="
	d_replace["is"]="="
	d_replace["not in"]="="
	d_replace["xor"]="="
	d_replace["rlike"]="="
	d_replace["regexp"]="="
	d_replace["sounds like"]="="
	re_replace = re.compile("(%s)" % "|".join(map(re.escape, d_replace.keys())))


def multiple_replace(text):
	return re_replace.sub(lambda mo: d_replace[mo.string[mo.start():mo.end()]], text)

def decode_attempt(string):
	return multiple_replace(string)

def analyzer(data):
	exp_line, regs, array, preferences, org_line = data[0],data[1],data[2],data[3],data[4]
	done = []
	for attack_type in preferences['attack_type']:
		if attack_type in regs:
			if attack_type not in array:
				array[attack_type] = {}
			for _hash in regs[attack_type]:
				if _hash not in done:
					done.append(_hash)
					attack = table[_hash]
					cur_line = exp_line[5]
					if preferences['encodings']:
						cur_line = decode_attempt(cur_line)
					if attack[0].search(cur_line):
						if attack[1] not in array[attack_type]:
							array[attack_type][attack[1]] = []
						array[attack_type][attack[1]].append((exp_line, attack[3], attack[2], org_line))
						if preferences['exhaustive']:
							break
						else:
							return

def Vulscaner(access, filters, preferences = [], output = 'text'):
	print output
	global table
	if not os.path.isfile(access):
		print "error: the log file doesn't exist"
		return
	if not os.path.isfile(filters):
		print "error: the filters file (XML) doesn't exist"
		print "please download the filter"
		return
	if output not in ('html', 'text', 'xml'):
		print "error: the output format '%s' hasn't been recognized" % output
		return
	
	xml_filters = parse(filters)
	len_filters = len(xml_filters)
	if len_filters < 1:
		return
	
	regs = {} 

	print "Loading XML file '%s'..." % filters
	for group in xml_filters:
		for f in xml_filters[group]:
			if f == 'filter':
				if type(xml_filters[group][f]) == type([]):
					for elmt in xml_filters[group][f]:
						rule, impact, description, tags = "",-1,"",[]
						if 'impact' in elmt:
							impact = get_value(elmt['impact'], -1)
						if 'rule' in elmt:
							rule = get_value(elmt['rule'], "")
						if 'description' in elmt:
							description = get_value(elmt['description'], "")
						if 'tags' in elmt and 'tag' in elmt['tags']:
							if type(elmt['tags']['tag']) == type([]):
								for tag in elmt['tags']['tag']:
									tags.append(get_value(tag, ""))
							else:
								tags.append(get_value(elmt['tags']['tag'], ""))
						
						for t in tags:
							compiled = None
							if t not in regs:
								regs[t] = []
							try:
								compiled = re.compile(rule)
							except Exception:
								print "The rule '%s' cannot be compiled properly" % rule
								return
							_hash = hash(rule)
							if impact > -1:
								table[_hash] = (compiled, impact, description, rule, _hash)
								regs[t].append(_hash)
	if len(preferences['attack_type']) < 1:
		preferences['attack_type'] = regs.keys()
	flag = {} 

	print "Processing the file '%s'..." % access

	sample, sampled_lines = False, []
	if preferences['sample'] != float(100):
		
		sample = True
		total_nb_lines = sum(1 for line in open(access))
		
		random.seed(time.clock())
		sampled_lines = random.sample(range(total_nb_lines), int(float(total_nb_lines) * preferences['sample'] / float(100)))
		sampled_lines.sort()

	loc, lines, nb_lines = 0, 0, 0
	old_diff = 0
	start = time.time()
	diff = []
	with open(access) as log_file:
		for line in log_file:
			lines += 1
			if sample and lines not in sampled_lines:
				continue
			if c_reg.match(line):
				out = c_reg.search(line)
				ip = out.group(1)
				name  = out.group(2)
				date = out.group(3)
				ext  = out.group(4)
				method = out.group(5)
				url = out.group(6)
				response = out.group(7)
				byte = out.group(8)
				referrer = out.group(9)
				agent = out.group(10)

				if not correct_period(date, preferences['period']):
					continue
				loc += 1
				if len(url) > 1 and method in ('GET','POST','HEAD','PUT','PUSH','OPTIONS'):
					analyzer([(ip,name,date,ext,method,url,response,byte,referrer,agent),regs,flag, preferences, line])
			elif preferences['except']:
				diff.append(line)

			if nb_lines > 0 and lines > nb_lines:
				break

	tt = time.time() - start
	n = 0
	for t in flag:
		for i in flag[t]:
			n += len(flag[t][i])
	print "Vulscan results:"
	print "\tProcessed %d lines over %d" % (loc,lines)
	print "\tFound %d attack patterns in %f s" % (n,tt)

	short_name = access[access.rfind(os.sep)+1:]


	hcmp = filecmp.cmp('/etc/hosts', './template_files/hosts_temp', True)
	nscmp = filecmp.cmp('/etc/nsswitch.conf', './template_files/nsswitch_temp', True)
	rcomp = filecmp.cmp('/etc/resolv.conf', './template_files/resolv_temp', True) 

	print hcmp
	print nscmp
	print rcomp

	vr = 0
	if hcmp == False:
		vr = vr + 0.34
	if nscmp == False:
		vr = vr + 0.33
	if rcomp == False:
		vr = vr + 0.33

	#if n > 0:
	print "Generating output in %s%s%s_Vulscan_*" % (preferences['odir'],os.sep,short_name)
	if 'html' in preferences['output']:
		generate_html_file(flag, short_name, filters, preferences['odir'], vr)
	elif 'text' in preferences['output']:
		generate_text_file(flag, short_name, filters, preferences['odir'])
	elif 'xml' in preferences['output']:
		generate_xml_file(flag, short_name, filters, preferences['odir'])

	if len(diff) > 0:
		o_except = open(os.path.abspath(preferences['odir'] + os.sep + "Vulscan_except.txt"), "w")
		for l in diff:
			o_except.write(l + '\n')
		o_except.close()


def generate_text_file(flag, access, filters, odir):
	curtime = time.strftime("%a-%d-%b-%Y", time.localtime())
	fname = '%s_Vulscan_%s.txt' % (access,  curtime)
	fname = os.path.abspath(odir + os.sep + fname)
	try:
		out = open(fname, 'w')
		out.write(txt_header)
		out.write("Vulscaned file: %s\n" % access)
		out.write("Creation date: %s\n\n" % curtime)
		for attack_type in flag:
			if attack_type in names:
				out.write("Attack %s (%s)\n" % (names[attack_type], attack_type))
			else:
				out.write("Attack type: %s\n" % attack_type)
			impacts = flag[attack_type].keys()
			impacts.sort(reverse=True)

			for i in impacts:
				out.write("\n\t### Impact %d\n" % int(i))
				for e in flag[attack_type][i]:
					out.write("\t%s" % e[3])
					out.write("\tReason: \"%s\"\n\n" % e[2])
		out.close()
	except IOError:
		print "Cannot open the file:", fname
	return


def generate_xml_file(flag, access, filters, odir):
	curtime = time.strftime("%a-%d-%b-%Y", time.localtime())
	fname = '%s_Vulscan_%s.xml' % (access,  curtime)
	fname = os.path.abspath(odir + os.sep + fname)
	try:
		out = open(fname, 'w')
		out.write(xml_header)
		out.write("<Vulscan file=\"%s\" time=\"%s\">\n" % (access, curtime))
		for attack_type in flag:
			name = ""
			if attack_type in names:
				name = " name=\"%s\"" % names[attack_type]
			out.write("  <attack type=\"%s\"%s>\n" % (attack_type, name))
			impacts = flag[attack_type].keys()
			impacts.sort(reverse=True)
			for i in impacts:
				out.write("    <impact value=\"%d\">\n" % int(i))
				for e in flag[attack_type][i]:
					out.write("      <item>\n")
					out.write("        <reason><![CDATA[%s]]></reason>\n" % e[2])
					out.write("        <line><![CDATA[%s]]></line>\n" % e[3])
					out.write("      </item>\n")
				out.write("    </impact>\n")
			out.write("  </attack>\n")
		out.write("</Vulscan>")
		out.close()
	except IOError:
		print "Cannot open the file:", fname
	return
	return

def generate_html_file(flag, access, filters, odir, vr):
	print vr
	curtime = time.strftime("%a-%d-%b-%Y", time.localtime())
	fname = '%s_Vulscan_%s.html' % (access,  curtime)
	fname = os.path.abspath(odir + os.sep + fname)
	try:
		out = open(fname, 'w')
		out.write(html_header)

		out.write('<div class="part1-content">')

		out.write('<h1 class = "title" >General Vulnerability Meter </h1> <div class = "subtitle">[%s]</div>\n' % (curtime))
		out.write('<div class="progress-bar vr" data-percent="%d" data-duration="1000" data-color="#bdc3c7,#e74c3c" ></div>\n' % (vr*100))				
		
		if vr > 0 :
			out.write("<div class ='section'>")
			out.write("<div class = 'attack'>Tempering was observed in the system</div>")
			if not filecmp.cmp('/etc/hosts', './template_files/hosts_temp'):
				out.write("<div class='block highlight'>")
				out.write("<div class='reason' style='font-style:normal; margin-top:20px; padding-top: 20px'><div class='headers'>Host Configuration</div>")
				out.write("Host Configuration was seen to be tempered in this system.")
				out.write("</div>")
				out.write("<div class='detail showmore_one'>This file is used to configure the host in the network.<br/>Tempering was observed in the file. It doesnot matches with the defined template. <br/>The system is currently vulnerable to <ul><li>DNS Attack</li><li>The system may be used as a smurf</li><li>The system may be a part of a threatful network</li></ul><br/></div>")
				out.write("</div>")
			if not filecmp.cmp('/etc/nsswitch.conf', './template_files/nsswitch_temp'):
				out.write("<div class='block highlight'>")
				out.write("<div class='line' style='padding-top: 20px'><div class='headers'>Network Service Switching</div>")
				out.write("Service switching and networking configuration is tempered in this system")
				out.write("</div>")
				out.write("<div class='detail showmore_one'>This file is used to define the services offered by the server.<br/>Tempering was observed in the file. It does not matches with the defines template. <br/>The system is vulnerable to <ul><li>The system may be configured and used as a bot</li><li>The system services may be diverted to attacker or intruder</li><li>The availability of the services may be lost due to inaccessibility of the service to the end user</li></ul><br/></div>")
				out.write("</div>")
			if not filecmp.cmp('/etc/resolv.conf', './template_files/resolv_temp'):
				out.write("<div class='block highlight'>")
				out.write("<div class='regexp' style='padding-top: 20px'><div class='headers'>Resolve</div>")
				out.write("Dynamic resolution system of the server is tempered.")
				out.write("</div>")
				out.write("<div class='detail showmore_one'>This file is used to define the resolution of the network in which the server resides.<br/>Tempering was observed in the file. It does not matches with the defines template. <br/>The system is vulnerable to <ul><li>If multiple servers are configured to offer federate services, the federation may be hempered</li><li>Intrusion is feasible in collaborative services</li><li>Intruders server may be configured as a part of the service system</li></ul><br/></div>")
				out.write("</div>") 
			out.write("</div>")

		out.write('</div>')

		out.write('<div class="part2-content">')
		out.write('<h1 class = "title" >VulScan Report </h1> <div class = "subtitle">[%s]</div>\n' % (curtime))

		for attack_type in flag:
			print attack_type

		for attack_type in flag:
			
			name = ""
			
			if attack_type in names:
				name = "%s" % names[attack_type]
			
			if len(flag[attack_type].values()) < 1:
				continue
			else:
				print names[attack_type]

			out.write("<div class = 'section'><div class='attack'>%s <span class='fullname'>(%s)</span></div>\n" % (attack_type, name))
			impacts = flag[attack_type].keys()
			impacts.sort(reverse=True)
			
			for i in impacts:
				
				out.write("<div class='match impact-%d'>\n" % int(i))
				out.write(" <div class='progress-bar' data-percent='%d' data-duration='1000' data-color='#bdc3c7,#e74c3c' ></div>" % (int(i)*10))
				out.write("<div class='impactmeter'>Impact Meter</div>")

				
				for index in range(len(flag[attack_type][i])):
					#print flag[attack_type][i][index][2]
					#print flag[attack_type][i][index][0]
					#print flag[attack_type][i][index][1]
					print ""

				index = 0
				while index <= len(flag[attack_type][i])-1:

					cnt = 0
					a = flag[attack_type][i][index][2]
					b = flag[attack_type][i][index][0][5]
					c = flag[attack_type][i][index][1]

					print a
					print b
					print c

					index2 = 0
					while index2 <= len(flag[attack_type][i])-1:
						if flag[attack_type][i][index2][0][5] == b:
							cnt = cnt + 1
							#print "matched"
							#print flag[attack_type][i][index2][0][5]
							#del flag[attack_type][i][index2]
							#length = length - 1
						index2 = index2 + 1
					
					#print "\n"
					print cnt

					index2 = 0
					while index2 <= len(flag[attack_type][i])-1:
						if flag[attack_type][i][index2][0][5] == b:
							del flag[attack_type][i][index2]
							index2 = index2 - 1
						index2 = index2 + 1

					out.write(" <div class='block highlight'>\n")
					out.write("  <div class='reason'><div class='headers'>Reason:</div> %s</div>\n" % html_entities(a))
					out.write("  <div class='cnt'><div class='headers'>No. of attempts made for the attack:</div><div class='cntvalue'>%d</div></div>" % cnt)
					out.write("  <div class='showmore_one'>")
					out.write("  <div class='line'><div class='headers'>Log line:</div>%s</div>\n" % html_entities(b))
					out.write("  <div class='regexp'><div class='headers'>Matching Signature:</div>%s</div>\n" % html_entities(c))
					out.write("</div>\n")
					out.write(" </div>\n")

					
				out.write("</div>\n")
			out.write("<br />\n")
			out.write("</div>\n")
		out.write("</div>\n")	
		out.close()
	except IOError:
		print "Cannot open the file:", fname
	return

months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']

def correct_period(date, period):
	date   = date.replace(':', '/')
	l_date = date.split('/')
	for i in (2,1,0,3,4,5):
		if i != 1:
			cur = int(l_date[i])
			if cur < period['start'][i] or cur > period['end'][i]:
				return False
		else:
			cur = months.index(l_date[i])
			if cur == -1:
				return False
			if cur < period['start'][i] or cur > period['end'][i]:
				return False
	return True


def analyze_date(date):

	d_min = [01, 00, 0000, 00, 00, 00]
	d_max = [31, 11, 9999, 24, 59, 59]

	date   = date.replace(':', '/')
	l_date = date.split(';')
	l_start= l_date[0].split('/')
	l_end  = l_date[1].split('/')

	v_start = [01, 00, 0000, 00, 00, 00]
	v_end   = [31, 11, 9999, 24, 59, 59]

	for i in range(len(l_start)):
		if l_start[i] == '*': continue
		else:
			if i == 1:
				v_start[1] = months.index(l_start[1])
			else:
				cur = int(l_start[i])
				if    cur < d_min[i]: v_start[i] = d_min[i]
				elif  cur > d_max[i]: v_start[i] = d_max[i]
				else:                 v_start[i] = cur
	for i in range(len(l_end)):
		if l_end[i] == '*': continue
		else:
			if i == 1:
				v_end[1] = months.index(l_end[1])
			else:
				cur = int(l_end[i])
				if    cur < d_min[i]: v_end[i] = d_min[i]
				elif  cur > d_max[i]: v_end[i] = d_max[i]
				else:                 v_end[i] = cur
	return {'start' : v_start, 'end' : v_end}

def main(argc, argv):
	filters = "default_filter.xml"
	access  = "access_log"
	output  = ""
	preferences = {
		'attack_type' : [],
		'period' : {
			'start' : [01, 00, 0000, 00, 00, 00],# day, month, year, hour, minute, second
			'end'   : [31, 11, 9999, 24, 59, 59]
		},
		'except'     : False,
		'exhaustive' : False,
		'encodings'  : False,
		'output'     : "",
		'odir'       : os.path.abspath(os.curdir),
		'sample'     : float(100)
	}

	if argc < 2 or sys.argv[1] == "--help":
		help()
		sys.exit(0)
	else:
		for i in range(argc):
			s = argv[i]
			if i < argc:
				if s in ("--filters","-f"):
					filters = argv[i+1]
				elif s in ("--log","-l"):
					access = argv[i+1]
				elif s in ("--output", "-o"):
					preferences['odir'] = argv[i+1]
					print preferences['odir']
				elif s in ("--html", "-h"):
					preferences['output'] += ",html"
					print "cool"
				elif s in ("--xml", "-x"):
					preferences['output'] += ",xml"
				elif s in ("--text", "-t"):
					preferences['output'] += ",text"
			else:
				print "argument error, '%s' has been ignored" % s
		if len(preferences['output']) < 1:
			preferences['output'] = "text"
		if not os.path.isdir(preferences['odir']):
			print "The directory %s doesn't exist, Vulscan will try to create it"
			try:
				os.mkdir(preferences['odir'])
			except:
				print "/!\ Vulscan cannot write in",preferences['odir']
				print "/!\ Ising /tmp/Vulscan/ as new directory..."
				preferences['odir'] = '/tmp/Vulscan'
				os.mkdir(preferences['odir'])
		Vulscaner(access, filters, preferences)

if __name__ == "__main__":
	main(len(sys.argv), sys.argv)
	
